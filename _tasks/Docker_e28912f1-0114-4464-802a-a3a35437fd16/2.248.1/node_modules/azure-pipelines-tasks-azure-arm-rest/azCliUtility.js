"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.loginAzureRM = exports.setAzureCloudBasedOnServiceEndpoint = void 0;
const fs = require("fs");
const path = require("path");
const tl = __importStar(require("azure-pipelines-task-lib/task"));
const azure_devops_node_api_1 = require("azure-devops-node-api");
const Q = require("q");
tl.setResourcePath(path.join(__dirname, 'module.json'), true);
function setAzureCloudBasedOnServiceEndpoint(connectedService) {
    var environment = tl.getEndpointDataParameter(connectedService, 'environment', true);
    if (!!environment) {
        console.log(tl.loc('SettingAzureCloud', environment));
        throwIfError(tl.execSync("az", "cloud set -n " + environment));
    }
}
exports.setAzureCloudBasedOnServiceEndpoint = setAzureCloudBasedOnServiceEndpoint;
function loginAzureRM(connectedService) {
    return __awaiter(this, void 0, void 0, function* () {
        var authScheme = tl.getEndpointAuthorizationScheme(connectedService, true);
        if (authScheme.toLowerCase() == "workloadidentityfederation") {
            var servicePrincipalId = tl.getEndpointAuthorizationParameter(connectedService, "serviceprincipalid", false);
            var tenantId = tl.getEndpointAuthorizationParameter(connectedService, "tenantid", false);
            const federatedToken = yield getFederatedToken(connectedService);
            tl.setSecret(federatedToken);
            const args = `login --service-principal -u "${servicePrincipalId}" --tenant "${tenantId}" --allow-no-subscriptions --federated-token "${federatedToken}"`;
            //login using OpenID Connect federation
            throwIfError(tl.execSync("az", args), tl.loc("LoginFailed"));
        }
        else if (authScheme.toLowerCase() == "serviceprincipal") {
            let authType = tl.getEndpointAuthorizationParameter(connectedService, 'authenticationType', true);
            var servicePrincipalId = tl.getEndpointAuthorizationParameter(connectedService, "serviceprincipalid", false);
            var tenantId = tl.getEndpointAuthorizationParameter(connectedService, "tenantid", false);
            let cliPassword = null;
            if (authType == "spnCertificate") {
                tl.debug('certificate based endpoint');
                let certificateContent = tl.getEndpointAuthorizationParameter(connectedService, "servicePrincipalCertificate", false);
                cliPassword = path.join(tl.getVariable('Agent.TempDirectory') || tl.getVariable('system.DefaultWorkingDirectory'), 'spnCert.pem');
                fs.writeFileSync(cliPassword, certificateContent);
            }
            else {
                tl.debug('key based endpoint');
                cliPassword = tl.getEndpointAuthorizationParameter(connectedService, "serviceprincipalkey", false);
            }
            let escapedCliPassword = cliPassword.replace(/"/g, '\\"');
            tl.setSecret(escapedCliPassword.replace(/\\/g, '\"'));
            //login using svn
            throwIfError(tl.execSync("az", `login --service-principal -u "${servicePrincipalId}" --password="${escapedCliPassword}" --tenant "${tenantId}" --allow-no-subscriptions`), tl.loc("LoginFailed"));
        }
        else if (authScheme.toLowerCase() == "managedserviceidentity") {
            //login using msi
            throwIfError(tl.execSync("az", "login --identity"), tl.loc("MSILoginFailed"));
        }
        else {
            throw tl.loc('AuthSchemeNotSupported', authScheme);
        }
        var subscriptionID = tl.getEndpointDataParameter(connectedService, "SubscriptionID", true);
        if (!!subscriptionID) {
            //set the subscription imported to the current subscription
            throwIfError(tl.execSync("az", "account set --subscription \"" + subscriptionID + "\""), tl.loc("ErrorInSettingUpSubscription"));
        }
    });
}
exports.loginAzureRM = loginAzureRM;
function throwIfError(resultOfToolExecution, errormsg) {
    if (resultOfToolExecution.code != 0) {
        tl.error("Error Code: [" + resultOfToolExecution.code + "]");
        if (errormsg) {
            tl.error("Error: " + errormsg);
        }
        throw resultOfToolExecution;
    }
}
function getSystemAccessToken() {
    tl.debug('Getting credentials for account feeds');
    let auth = tl.getEndpointAuthorization('SYSTEMVSSCONNECTION', false);
    if (auth && auth.scheme === 'OAuth') {
        tl.debug('Got auth token, setting it as secret so it does not print in console log');
        tl.setSecret(auth.parameters['AccessToken']);
        return auth.parameters['AccessToken'];
    }
    tl.warning(tl.loc('FeedTokenUnavailable'));
    return '';
}
function getFederatedToken(connectedServiceName) {
    return __awaiter(this, void 0, void 0, function* () {
        const projectId = tl.getVariable("System.TeamProjectId");
        const hub = tl.getVariable("System.HostType");
        const planId = tl.getVariable('System.PlanId');
        const jobId = tl.getVariable('System.JobId');
        let uri = tl.getVariable("System.CollectionUri");
        if (!uri) {
            uri = tl.getVariable("System.TeamFoundationServerUri");
        }
        const token = getSystemAccessToken();
        const authHandler = (0, azure_devops_node_api_1.getHandlerFromToken)(token);
        const connection = new azure_devops_node_api_1.WebApi(uri, authHandler);
        const oidc_token = yield initOIDCToken(connection, projectId, hub, planId, jobId, connectedServiceName, 0, 2000);
        tl.setSecret(oidc_token);
        return oidc_token;
    });
}
function initOIDCToken(connection, projectId, hub, planId, jobId, serviceConnectionId, retryCount, timeToWait) {
    var deferred = Q.defer();
    connection.getTaskApi().then((taskApi) => {
        taskApi.createOidcToken({}, projectId, hub, planId, jobId, serviceConnectionId).then((response) => {
            if (response != null) {
                tl.debug('Got OIDC token');
                deferred.resolve(response.oidcToken);
            }
            else if (response.oidcToken == null) {
                if (retryCount < 3) {
                    let waitedTime = timeToWait;
                    retryCount += 1;
                    setTimeout(() => {
                        deferred.resolve(initOIDCToken(connection, projectId, hub, planId, jobId, serviceConnectionId, retryCount, waitedTime));
                    }, waitedTime);
                }
                else {
                    deferred.reject(tl.loc('CouldNotFetchAccessTokenforAAD'));
                }
            }
        }, (error) => {
            deferred.reject(tl.loc('CouldNotFetchAccessTokenforAAD') + " " + error);
        });
    });
    return deferred.promise;
}
