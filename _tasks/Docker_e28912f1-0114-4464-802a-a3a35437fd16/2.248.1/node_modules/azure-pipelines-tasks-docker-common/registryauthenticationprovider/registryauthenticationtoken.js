"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getDockerRegistryEndpointAuthenticationToken = void 0;
const tl = require("azure-pipelines-task-lib/task");
const util = require('util');
const acrauthenticationtokenprovider_1 = require("./acrauthenticationtokenprovider");
const genericauthenticationtokenprovider_1 = require("./genericauthenticationtokenprovider");
class RegistryServerAuthenticationToken {
    constructor(username, authenticationPassword, registry, email, xMetaSourceClient) {
        this.registry = registry;
        this.password = authenticationPassword;
        this.username = username;
        this.email = email;
        this.xMetaSourceClient = xMetaSourceClient;
    }
    getUsername() {
        return this.username;
    }
    getPassword() {
        return this.password;
    }
    getLoginServerUrl() {
        return this.registry;
    }
    getEmail() {
        return this.email;
    }
    getDockerConfig() {
        var authenticationToken = Buffer.from(this.username + ":" + this.password).toString('base64');
        console.log("##vso[task.setvariable variable=CONTAINER_AUTHENTICATIONTOKEN;issecret=true;]" + authenticationToken);
        var auths = util.format('{"auths": { "%s": {"auth": "%s", "email": "%s" } }, "HttpHeaders":{"X-Meta-Source-Client":"%s"} }', this.registry, authenticationToken, this.email, this.xMetaSourceClient);
        return auths;
    }
    getDockerAuth() {
        var authenticationToken = Buffer.from(this.username + ":" + this.password).toString('base64');
        console.log("##vso[task.setvariable variable=CONTAINER_AUTHENTICATIONTOKEN;issecret=true;]" + authenticationToken);
        let auth = util.format('{ "%s": {"auth": "%s", "email": "%s" } }', this.registry, authenticationToken, this.email);
        return auth;
    }
}
exports.default = RegistryServerAuthenticationToken;
function getDockerRegistryEndpointAuthenticationToken(endpointId) {
    return __awaiter(this, void 0, void 0, function* () {
        var registryType = tl.getEndpointDataParameter(endpointId, "registrytype", true);
        let authToken;
        if (registryType === "ACR") {
            const loginServer = tl.getEndpointAuthorizationParameter(endpointId, "loginServer", false).toLowerCase();
            let acrAuthenticationTokenProvider = new acrauthenticationtokenprovider_1.default(endpointId, loginServer);
            authToken = yield acrAuthenticationTokenProvider.getToken();
        }
        else {
            authToken = new genericauthenticationtokenprovider_1.default(endpointId).getAuthenticationToken();
        }
        return authToken;
    });
}
exports.getDockerRegistryEndpointAuthenticationToken = getDockerRegistryEndpointAuthenticationToken;
